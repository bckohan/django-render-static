name: test

on: [push, pull_request, workflow_dispatch]

jobs:

  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # run static analysis on bleeding and trailing edges
        python-version: [ '3.9', '3.12' ]
        django-version:
          - 'Django~=3.2.0' # LTS April 2024
          - 'Django~=4.2.0' # LTS April 2026
          - 'Django~=5.0.0'
        exclude:
          - python-version: '3.9'
            django-version: 'Django~=4.2.0'
          - python-version: '3.9'
            django-version: 'Django~=5.0.0'
          - python-version: '3.12'
            django-version: 'Django~=3.2.0'

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip install --upgrade pip
          poetry install -E all
          poetry run pip install -U "${{ matrix.django-version }}"
      - name: Run Static Analysis
        run: |
          poetry run black render_static --check
          poetry run pylint render_static
          poetry run mypy render_static
          poetry check
          poetry run pip check
          poetry export --without-hashes --format=requirements.txt | poetry run safety check --stdin
          poetry run python -m readme_renderer ./README.rst -o /tmp/README.html
          cd ./doc
          poetry run doc8 --ignore-path build --max-line-length 100

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        django-version:
          - '3.2.0' # LTS April 2024
          - '4.2.0' # LTS April 2026
          - '5.0.0' # April 2025
        exclude:
          - python-version: '3.11'
            django-version: '3.2.0'
          - python-version: '3.12'
            django-version: '3.2.0'
          - python-version: '3.8'
            django-version: '5.0.0'
          - python-version: '3.9'
            django-version: '5.0.0'

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install Release Dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry run pip install --upgrade pip
        poetry install -E all
        poetry run pip install -U "Django~=${{ matrix.django-version }}"
    - name: Run Unit Tests
      run: |
        poetry run pytest
        poetry run pip uninstall -y jinja2 pyyaml importlib-resources
        poetry run pytest --cov-append
        mv .coverage py${{ matrix.python-version }}-dj${{ matrix.django-version }}.coverage
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     detached: true
    #   timeout-minutes: 60
    - name: Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-py${{ matrix.python-version }}-dj${{ matrix.django-version }}
        path: py${{ matrix.python-version }}-dj${{ matrix.django-version }}.coverage
  
  coverage-combine:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
    
      - name: Install Release Dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry run pip install --upgrade pip
          poetry install

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - run: ls -la *.coverage
      - run: poetry run coverage combine *.coverage
      - run: poetry run coverage report
      - run: poetry run coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
